name: CI/CD Pipeline

on:
  push:
    paths:
      - "app/**"
    branches:
      - main
  workflow_dispatch:

env:
  IMAGE_NAME: node
  CLUSTER_NAME: node-app-cluster
  SERVICE_NAME: node-app-service
  REGION: us-east-1

jobs:
  build_and_release:
    name: Build and Release
    runs-on: ubuntu-latest
    environment:
      name: Production
    steps:
      - name: Authenticate with AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.REGION }}

      - name: Login to Amazon ECR Public
        id: login-ecr-public
        uses: aws-actions/amazon-ecr-login@v2

      - name: Check if ECR repository exists
        id: check-ecr-repo
        run: aws ecr describe-repositories --repository-names ${{ env.IMAGE_NAME }} > /dev/null 2>&1 || echo "::set-output name=exists::false"

      - name: Create ECR repository
        if: steps.check-ecr-repo.outputs.exists == 'false'
        run: aws ecr create-repository --repository-name ${{ env.IMAGE_NAME }}

      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: generate .env file
        run: |
          touch .env 
          echo "MYSQL_MASTER_HOST=${{ secrets.MYSQL_MASTER_HOST }}" >> .env
          echo "MYSQL_SLAVE_HOST=${{ secrets.MYSQL_SLAVE_HOST }}" >> .env
          echo "MYSQL_APP_USER=${{ secrets.MYSQL_APP_USER }}" >> .env
          echo "MYSQL_APP_USER_PASSWORD=${{ secrets.MYSQL_APP_USER_PASSWORD }}" >> .env
          echo "DATABASE_NAME=${{ secrets.DATABASE_NAME }}" >> .env
        working-directory: app


      - name: Build, tag, and push docker image to Amazon ECR
        uses: docker/build-push-action@v5
        with:
          context: ./app
          file: ./app/Dockerfile
          push: true
          tags: "${{ secrets.ACC_ID }}.dkr.ecr.${{ env.REGION }}.amazonaws.com/${{ env.IMAGE_NAME }}:latest"
          build-args: |
            MYSQL_MASTER_HOST=${{ secrets.MYSQL_MASTER_HOST }}
            MYSQL_SLAVE_HOST=${{ secrets.MYSQL_SLAVE_HOST }}
            MYSQL_APP_USER=${{ secrets.MYSQL_APP_USER }}
            MYSQL_APP_USER_PASSWORD=${{ secrets.MYSQL_APP_USER_PASSWORD }}
            DATABASE_NAME=${{ secrets.DATABASE_NAME }}

  deploy:
    name: Deploy to ECS
    needs: [build_and_release]
    runs-on: ubuntu-latest
    environment:
      name: Production
    steps:
      - name: Authenticate with AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.REGION }}

      - name: Check ECS service status
        id: check-ecs-service
        run: |
          status=$(aws ecs describe-services --cluster ${{ env.CLUSTER_NAME }} --services ${{ env.SERVICE_NAME }} | jq --raw-output 'select(.services[].status != null ) | .services[].status')
          if [ "$status" == "ACTIVE" ]; then
            echo "::set-output name=status::ACTIVE"
          else
            echo "::set-output name=status::DEACTIVE"
          fi

      - name: Deploy to ECS
        if: steps.check-ecs-service.outputs.status == 'ACTIVE'
        run: |
          aws ecs update-service --cluster ${{ env.CLUSTER_NAME }} --service ${{ env.SERVICE_NAME }} --force-new-deployment
